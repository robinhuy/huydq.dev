<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>HuyDQ&#39;s Blog</title>
    <link>https://huydq.dev/</link>
    <description>Recent content on HuyDQ&#39;s Blog</description>
    <image>
      <url>https://huydq.dev/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://huydq.dev/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 01 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://huydq.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cách tạo một trang blog cá nhân miễn phí dành cho dev</title>
      <link>https://huydq.dev/blog/cach-tao-mot-trang-blog-ca-nhan-mien-phi-danh-cho-dev/</link>
      <pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/cach-tao-mot-trang-blog-ca-nhan-mien-phi-danh-cho-dev/</guid>
      <description>Vào một ngày đẹp trời, bỗng dưng mình nảy ra ý định làm một trang blog cá nhân thay vì viết Blog trên các nền tảng có sẵn như viblo.asia, techmaster.vn, kipalog.vn, &amp;hellip; Tất nhiên các bài viết mới vẫn sẽ đăng lên các nền tảng này để kiếm người đọc chứ blog này ma nó đọc 😅).
Ý tưởng có rồi, nhưng thực hiện như nào, sử dụng công nghệ nào, chi phí như nào?</description>
    </item>
    
    <item>
      <title>Tạo App Launcher icon cho React Native app (Android &#43; iOS)</title>
      <link>https://huydq.dev/blog/tao-app-launcher-icon-cho-react-native-app-android-ios/</link>
      <pubDate>Sat, 06 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/tao-app-launcher-icon-cho-react-native-app-android-ios/</guid>
      <description>Trước khi đẩy app lên Store, chúng ta sẽ cần tạo App Launcher Icon (icon của ứng dụng trên máy của người dùng). App code bằng React Native sẽ có thể đẩy lên cả Google Play (Android) và App Store (iOS), do đó mình sẽ hướng dẫn cách tạo App Launcher Icon cho cả 2 hệ hiều hành trên.
1. App Launcher Icon cho iOS Bước 1 Đầu tiên chúng ta cần phải có 1 ảnh icon được thiết kế sẵn với kích thước 1024x1024 pixels (hoặc lớn hơn cũng được).</description>
    </item>
    
    <item>
      <title>Những lỗi cơ bản trong lập trình mà developer nên tránh</title>
      <link>https://huydq.dev/blog/nhung-loi-co-ban-trong-lap-trinh-ma-developer-nen-tranh/</link>
      <pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/nhung-loi-co-ban-trong-lap-trinh-ma-developer-nen-tranh/</guid>
      <description>Không lập trình viên nào code mà không có bug. Tuy nhiên có rất nhiều lỗi cơ bản chúng ta nên tránh để tạo ra ít bug hơn, code sạch và trong sáng hơn, dễ bảo trì hơn, đỡ bị ăn chửi hơn, …
1. Xử lý quá nhiều thứ trong một function Theo nguyên tắc Single Responsibility, một function chỉ nên thực hiện một và chỉ một nhiệm vụ duy nhất.</description>
    </item>
    
    <item>
      <title>Đẩy code Create React App lên Internet miễn phí</title>
      <link>https://huydq.dev/blog/day-code-create-react-app-len-internet-mien-phi/</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/day-code-create-react-app-len-internet-mien-phi/</guid>
      <description>Sau khi code xong 1 ứng dụng bằng Create React App, chúng ta có thể đẩy sản phẩm lên Internet theo 1 trong 3 cách miễn phí sau chỉ với 3 bước (còn nhiều cách khác nhưng tác giả lười viết 😅):
1. Github Pages Giả sử bạn đã có tài khoản trên github là robinhuy, và có 1 repository chứa source code ứng dụng tạo bởi Create React App là react-app.</description>
    </item>
    
    <item>
      <title>Làm sao để thiết kế Form tốt hơn?</title>
      <link>https://huydq.dev/blog/lam-sao-de-thiet-ke-form-tot-hon/</link>
      <pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/lam-sao-de-thiet-ke-form-tot-hon/</guid>
      <description>Bài viết được dịch từ uxdesign.cc, có lược bớt và chỉnh sửa theo sở thích của người dịch 😜
Những lỗi thiết kế form và cách tối ưu Form là một thành phần rất quan trọng trên website. Bài viết này sẽ chỉ ra những điều nên và không nên khi thiết kế Form. Chú ý đây chỉ là đề xuất chứ không phải nguyên lý nên sẽ có ngoại lệ.</description>
    </item>
    
    <item>
      <title>Truyền dữ liệu giữa React Components</title>
      <link>https://huydq.dev/blog/truyen-du-lieu-giua-react-components/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/truyen-du-lieu-giua-react-components/</guid>
      <description>Bài viết được biên dịch và tóm tắt lại từ https://towardsdatascience.com , code demo được chuyển sang dùng Hooks.
Xử lý dữ liệu trong React có thể hơi khó khăn một chút, nhưng cũng không quá phức tạp. Tôi đã tổng kết lại 3 cách để truyền dữ liệu giữa các Component trong React:
 Từ Parent (Component cha) đến Child (Component con) sử dụng Props. Từ Child đến Parent sử dụng Callbacks.</description>
    </item>
    
    <item>
      <title>Tạo 1 REST API phục vụ cho mục đích học tập trong 30 giây</title>
      <link>https://huydq.dev/blog/tao-1-rest-api-phuc-vu-cho-muc-dich-hoc-tap-trong-30-giay/</link>
      <pubDate>Tue, 29 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/tao-1-rest-api-phuc-vu-cho-muc-dich-hoc-tap-trong-30-giay/</guid>
      <description>Video demo: https://youtu.be/O6Agt4cLbfo.
Dựng Server local Yêu cầu máy tính đã cài và chạy được Git + NodeJS.
Các bước thực hiện:
  Clone repository sau (hoặc fork về nếu muốn quản lý source code, nhớ star để ủng hộ tác giả): https://github.com/robinhuy/fake-rest-api-nodejs.git
 git clone https://github.com/robinhuy/fake-rest-api-nodejs.git   Cài đặt dependencies
 cd fake-rest-api-nodejs  npm install   Chạy server
 npm start   Vậy là chúng ta đã có 1 Server API chạy trên http://localhost:3000 với 1 resource có sẵn là /users với các API theo chuẩn REST:</description>
    </item>
    
    <item>
      <title>Code web tĩnh dễ hơn với Pug</title>
      <link>https://huydq.dev/blog/code-web-tinh-de-hon-voi-pug/</link>
      <pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/code-web-tinh-de-hon-voi-pug/</guid>
      <description>Note: Pug ở đây là 1 View Template Engine (chứ không phải tên 1 loại chó), có thể dùng ở cả phía Server lẫn Client. Trong bài viết này sẽ hướng dẫn sử dụng Pug phía client cho Frontend Dev.
Tạo khung project Sau khi đã thiết kế xong giao diện website, chúng ta sẽ bắt đầu xây dựng khung project. Ví dụ cấu trúc thông thường của 1 project web tĩnh:</description>
    </item>
    
    <item>
      <title>Tạo website WordPress miễn phí trên Heroku</title>
      <link>https://huydq.dev/blog/tao-website-wordpress-mien-phi-tren-heroku/</link>
      <pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/tao-website-wordpress-mien-phi-tren-heroku/</guid>
      <description>Thông thường 1 trang web viết bằng WordPress có thể đẩy lên Internet qua Free Hosting, Share Hosting, VPS, &amp;hellip; Với những ai mới học mà muốn tiết kiệm chi phí thì thường dùng Free Hosting, nhưng Free Hosting thường là host nước ngoài, có rất nhiều hạn chế và hay bị lỗi. Trong bài viết này mình sẽ hướng dẫn các bạn tạo một website WordPress miễn phí trên Heroku và chức năng có thể sử dụng gần như thuê 1 con VPS vậy 😎.</description>
    </item>
    
    <item>
      <title>Cơ bản về bảo mật Web</title>
      <link>https://huydq.dev/blog/co-ban-ve-bao-mat-web/</link>
      <pubDate>Thu, 09 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/co-ban-ve-bao-mat-web/</guid>
      <description>Có rất nhiều lý do để học về bảo mật web như:
 Bạn lo lắng về việc để lộ thông tin cá nhân trên mạng. Bạn quan tâm đến tính bảo mật cho website hoặc ứng dụng của mình. Bạn là lập trình viên và đang đi xin việc, bạn muốn chuẩn bị sẵn cho trường hợp nhà tuyển dụng hỏi về các vấn đề bảo mật web.  &amp;hellip; và nhiều lý do khác nữa.</description>
    </item>
    
    <item>
      <title>Quản lý Dependencies trong Go bằng Govendor</title>
      <link>https://huydq.dev/blog/quan-ly-dependencies-trong-go-bang-govendor/</link>
      <pubDate>Mon, 22 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/quan-ly-dependencies-trong-go-bang-govendor/</guid>
      <description>Để quản lý Dependencies (packages) trong Go chúng ta có thể dùng nhiều tool hỗ trợ. Về bản chất thì chúng tương tự nhau nhưng cũng có nhưng ưu nhược điểm riêng, ví dụ một số tool mình đã từng sử dụng như Dep hoặc Glide (tham khảo bài viết Quản lý package trong Go).
Hiện mình đang sử dụng một tool khác là Govendor, và theo ý kiến cá nhân thì mình thấy tool này dễ sử dụng hơn, và cách cấu hình cũng như hoạt động của nó khá giống với npm trên NodeJS.</description>
    </item>
    
    <item>
      <title>Starbucks không sử dụng Two-Phase Commit</title>
      <link>https://huydq.dev/blog/starbucks-khong-su-dung-two-phase-commit/</link>
      <pubDate>Sat, 20 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/starbucks-khong-su-dung-two-phase-commit/</guid>
      <description>Tôi vừa trở về sau một chuyến du lịch 2 tuần đến Nhật Bản.
Một trong những hình ảnh quen thuộc ở đây đó là số lượng lớn các cửa hàng cà phê Starbucks, đặc biệt là quanh khu vực Shinjuku và Roppongi. Trong khi chờ đợi một tách ca cao nóng, tôi đã nghĩ về cách thức mà Starbucks phục vụ khách hàng.
Starbucks cũng như hầu hết các công ty khác thì đều muốn tối đa số lượng khách hàng có thể phục vụ.</description>
    </item>
    
    <item>
      <title>Eventual Consistency và Strong Consistency trong hệ thống Cơ sở dữ liệu phân tán</title>
      <link>https://huydq.dev/blog/eventual-consistency-va-strong-consistency-trong-he-thong-co-so-du-lieu-phan-tan/</link>
      <pubDate>Fri, 12 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/eventual-consistency-va-strong-consistency-trong-he-thong-co-so-du-lieu-phan-tan/</guid>
      <description>Một Database Transaction, theo như định nghĩa sẽ phải thỏa mãn các tính chất sau: Atomic, Consistency, Isolation và Durable (hay thường được gọi là ACID). Bài viết này sẽ tập trung vào tính chất Consistency (tính nhất quán), và so sánh giữa Eventual Consistency với Strong Consistency trong hệ thống Distributed Databases qua các ví dụ đời thường.
Lý thuyết Distributed Database (hệ thống cơ sở dữ liệu phân tán): Là hệ thống Cơ sở dữ liệu (CSDL) mà có thể được phân tải, lưu trữ ở nhiều nơi.</description>
    </item>
    
    <item>
      <title>Những quan niệm sai lầm về CQRS</title>
      <link>https://huydq.dev/blog/nhung-quan-niem-sai-lam-ve-cqrs/</link>
      <pubDate>Thu, 11 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/nhung-quan-niem-sai-lam-ve-cqrs/</guid>
      <description>Bài viết được dịch (có chỉnh sửa) từ cuốn Patterns Principles and Practices of Domain Driven Design của Scott Millett và Nick Tune, dành cho những ai đã và đang cần tìm hiểu về CQRS (Command Query Responsibility Segregation). Trong bài viết có sử dụng nhiều thuật ngữ chuyên ngành, mình sẽ dẫn link đến các tài liệu Tiếng Anh tương ứng chứ không dịch (không biết dịch như nào hoặc dịch ra nghe rất củ chuối 😬).</description>
    </item>
    
    <item>
      <title>Cookies và vấn đề bảo mật</title>
      <link>https://huydq.dev/blog/cookies-va-van-de-bao-mat/</link>
      <pubDate>Sat, 15 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/cookies-va-van-de-bao-mat/</guid>
      <description>Chắc hẳn các lập trình viên, đặc biệt là các Backend developer, sẽ không còn xa lạ với Cookie (thường đi kèm với Session). Tuy nhiên nhiều người có thể chưa thực sự hiểu rõ vì nó thường hay được giới thiệu kèm với một ngôn ngữ lập trình phía Backend (ví dụ như PHP, NodeJS, &amp;hellip;) và sử dụng các các thư viện để thao tác. Bài viết này sẽ giới thiệu rõ ràng hơn về Cookie cả phía Backend lẫn Frontend và một số vấn đề bảo mật liên quan đến Cookie để các web developer thận trọng hơn khi sử dụng.</description>
    </item>
    
    <item>
      <title>Validate dữ liệu trong Go sử dụng Govalidator</title>
      <link>https://huydq.dev/blog/validate-du-lieu-trong-go-su-dung-govalidator/</link>
      <pubDate>Fri, 18 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/validate-du-lieu-trong-go-su-dung-govalidator/</guid>
      <description>Trong các ứng dụng cho phép người dùng nhập dữ liệu thì đều cần phải có validate để bảo mật và đảm bảo ứng dụng chạy đúng.
Golang có một số thư viện open source hỗ trợ chúng ta làm việc này một cách nhanh chóng, ví dụ như govalidator.
Cài đặt Cài govalidator qua package manager hoặc đơn giản là dùng go get:
go get github.com/asaskevich/govalidator Import vào trong project:</description>
    </item>
    
    <item>
      <title>Golang embedded type - Kế thừa trong Go</title>
      <link>https://huydq.dev/blog/golang-embedded-type-ke-thua-trong-go/</link>
      <pubDate>Wed, 16 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/golang-embedded-type-ke-thua-trong-go/</guid>
      <description>Go không phải một ngôn ngữ hướng đối tượng (OOP). Tuy nhiên chúng ta có thể áp dụng một số ưu điểm của hướng đối tượng vào trong Go.
Chúng ta có Struct (tương tự Class), Interface và Method. Để sử dụng thuộc tính &amp;ldquo;kế thừa&amp;rdquo; trong Go ta sẽ dùng embedded type.
Embedded Type là khai báo một type nằm trong một type khác nhưng không khai báo tên, trường mà không khai báo tên còn được gọi là embedded field.</description>
    </item>
    
    <item>
      <title>Quản lý package trong Go</title>
      <link>https://huydq.dev/blog/quan-ly-package-trong-go/</link>
      <pubDate>Fri, 30 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/quan-ly-package-trong-go/</guid>
      <description>Để sử dụng 1 package trong Go ta dùng lệnh import:
  Với local package (các package nằm trong project) thì ta có thể sử dụng đường dẫn tương đối.
  Với external package (các package bên ngoài project) thì ta sẽ phải cài đặt vào trong $GOPATH (đây là một biến môi trường để thiết lập nơi cài package).
  Để cài đặt package thì chúng ta có thể dùng các cách sau:</description>
    </item>
    
    <item>
      <title>Học Go cấp tốc Phần 5:  Methods và Interfaces</title>
      <link>https://huydq.dev/blog/hoc-go-cap-toc-phan-5-methods-va-interfaces/</link>
      <pubDate>Wed, 21 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/hoc-go-cap-toc-phan-5-methods-va-interfaces/</guid>
      <description>Các phần trước:
Phần 1: Packages, variables và functions.
Phần 2: Điều khiển luồng với if, else, switch và defer.
Phần 3: Arrays và Slices.
Phần 4: Structs và Maps.
Methods Trong Go không có class, chúng ta có thể dùng struct thay cho class như ở phần trước. Tuy nhiên trong struct mới chỉ có thuộc tính chứ chưa có phương thức. Để ứng dụng được phương thức (method) như các ngôn ngữ hướng đối tượng khác ta sẽ cần khai báo function kèm theo một tham số đặc biệt gọi là receiver argument.</description>
    </item>
    
    <item>
      <title>Học Go cấp tốc Phần 4:  Structs và Maps</title>
      <link>https://huydq.dev/blog/hoc-go-cap-toc-phan-4-structs-va-maps/</link>
      <pubDate>Tue, 20 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/hoc-go-cap-toc-phan-4-structs-va-maps/</guid>
      <description>Các phần trước:
Phần 1: Packages, variables và functions.
Phần 2: Điều khiển luồng với if, else, switch và defer.
Phần 3: Arrays và Slices.
Structs Tương tự C, một struct trong Go là tập hợp các trường (field) do người dùng tự định nghĩa. Mỗi trường có thể có kiểu dữ liệu khác nhau, thậm chí có thể là một struct. Trong Go không có class như các ngôn ngữ hướng đối tượng, do đó chúng ta có thể dùng struct thay cho class.</description>
    </item>
    
    <item>
      <title>Học Go cấp tốc Phần 3:  Arrays và Slices</title>
      <link>https://huydq.dev/blog/hoc-go-cap-toc-phan-3-arrays-va-slices/</link>
      <pubDate>Mon, 19 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/hoc-go-cap-toc-phan-3-arrays-va-slices/</guid>
      <description>Các phần trước:
Phần 1: Packages, variables và functions.
Phần 2: Điều khiển luồng với if, else, switch và defer.
Arrays Array (mảng) trong Go tương tự các ngôn ngữ khác, tuy nhiên nó có kích thước cố định (fixed size) và các phần tử bên trong phải cùng loại dữ liệu. Ví dụ:
// Khởi tạo một mảng gồm 2 string var a [2]string  // Gán giá trị cho các phần tử trong mảng a[0] = &amp;#34;Hello&amp;#34; a[1] = &amp;#34;World&amp;#34;  // In kết quả ra console fmt.</description>
    </item>
    
    <item>
      <title>Học Go cấp tốc Phần 2:  Điều khiển luồng với if, else, switch và defer</title>
      <link>https://huydq.dev/blog/hoc-go-cap-toc-phan-2-dieu-khien-luong-voi-if-else-switch-va-defer/</link>
      <pubDate>Sun, 18 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/hoc-go-cap-toc-phan-2-dieu-khien-luong-voi-if-else-switch-va-defer/</guid>
      <description>Phần trước: Học Go cấp tốc Phần 1: Packages, variables và functions.
Phần tiếp theo chúng ta sẽ cùng tìm hiểu cách điều khiển luồng (flow control) trong Go.
Vòng lặp Trong Go chỉ có 1 kiểu vòng lặp là sử dụng for. Cách dùng tương tự các ngôn ngữ khác nhưng phần khai báo biến, điều kiện lặp, &amp;hellip; không cần đặt trong cặp ngoặc tròn:
// Tính tổng các số từ 0 - 9 sum := 0 for i := 0; i &amp;lt; 10; i++ {  sum += i } fmt.</description>
    </item>
    
    <item>
      <title>Học Go cấp tốc Phần 1: Packages, variables và functions</title>
      <link>https://huydq.dev/blog/hoc-go-cap-toc-phan-1-packages-variables-va-functions/</link>
      <pubDate>Sat, 17 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/hoc-go-cap-toc-phan-1-packages-variables-va-functions/</guid>
      <description>Go(hay thường được gọi là Golang) là một ngôn ngữ lập trình mã nguồn mở được tạo ở Google vào năm 2009 bởi Robert Griesemer, Rob Pike, và Ken Thompson. Nó được ra đời nhằm mục đích phát triển các trang web nhanh hơn, dễ dàng hơn và đáp ứng được yêu cầu truy cập lớn. Về lịch sử ra đời cũng như giới thiệu chi tiết hơn các bạn có thể xem ở wikipedia 😅</description>
    </item>
    
    <item>
      <title>Thêm mới và bảo mật API trong Kong API Gateway</title>
      <link>https://huydq.dev/blog/them-moi-va-bao-mat-api-trong-kong-api-gateway/</link>
      <pubDate>Mon, 05 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/them-moi-va-bao-mat-api-trong-kong-api-gateway/</guid>
      <description>Kong cung cấp một RESTful Admin API cho phép chúng ta thực hiện việc cấu hình và quản lý các API. Mặc định Admin API sẽ lắng nghe ở cổng 8001 và cổng 8444 cho giao thức https. Chú ý API này chỉ dùng trong nội bộ, không public ra ngoài, vì nó cho phép quản lý toàn bộ hệ thống API gateway của Kong.
Để dễ hình dung, bài viết này sẽ hướng dẫn tạo mới các API và bảo mật cơ bản bằng plugins sử dụng Konga (GUI cho Admin API).</description>
    </item>
    
    <item>
      <title>Tùy chỉnh Visual Studio Code khi lập trình ASP.NET Core</title>
      <link>https://huydq.dev/blog/tuy-chinh-visual-studio-code-khi-lap-trinh-aspnet-core/</link>
      <pubDate>Sat, 13 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/tuy-chinh-visual-studio-code-khi-lap-trinh-aspnet-core/</guid>
      <description>ASP.NET Core là một open-source web framework mới của Microsoft. Nó cho phép phát triển và chạy ứng dụng web đa nền tảng. Giờ đây bạn có thể lập trình .NET trên cả Linux và MacOS.
 Để lập trình chúng ta có thể sử dụng Visual Studio (trên Windows) hoặc Visual Studio for Mac (trên Mac). Ngoài ra chúng ta cũng có thể dùng Visual Studio Code (VS Code) để lập trình trên cả Windows, MacOS và Linux.</description>
    </item>
    
    <item>
      <title>Sử dụng cơ sở dữ liệu Oracle với Entity Framework</title>
      <link>https://huydq.dev/blog/su-dung-co-so-du-lieu-oracle-voi-entity-framework/</link>
      <pubDate>Mon, 11 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/su-dung-co-so-du-lieu-oracle-voi-entity-framework/</guid>
      <description>Thông thường khi làm dự án với Entity Framework, chúng ta hay dùng cơ sở dữ liệu (CSDL) MS SQL Server. Tuy nhiên tùy theo yêu cầu công việc, bạn có thể sẽ phải làm việc với các cơ sở dữ liệu khác. Bài viết này mình sẽ chia sẻ 1 số kinh nghiệm của bản thân khi phải làm việc với CSDL Oracle (cụ thể là Oracle phiên bản 11g).</description>
    </item>
    
    <item>
      <title>Cài đặt chứng chỉ SSL của Namecheap với Nginx</title>
      <link>https://huydq.dev/blog/cai-dat-chung-chi-ssl-cua-namecheap-voi-nginx/</link>
      <pubDate>Fri, 28 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/cai-dat-chung-chi-ssl-cua-namecheap-voi-nginx/</guid>
      <description>Bài trước mình đã hướng dẫn cách tạo chứng chỉ SSL miễn phí với Let&amp;rsquo;s Encrypt. Tiếp theo mình sẽ hướng dẫn các bạn cách tạo chứng chỉ SSL qua dịch vụ của Namecheap (mất phí nhé 😂)
Đăng ký dịch vụ của Namecheap
Đầu tiên chúng ta sẽ cần đăng ký tài khoản tại Namecheap và chọn 1 loại chứng chỉ phù hợp https://www.namecheap.com/security/ssl-certificates.aspx
Sau khi đã thanh toán, truy cập vào Dashboard để active dịch vụ</description>
    </item>
    
    <item>
      <title>Chứng chỉ SSL miễn phí với Let&#39;s Encrypt</title>
      <link>https://huydq.dev/blog/chung-chi-ssl-mien-phi-voi-lets-encrypt/</link>
      <pubDate>Fri, 14 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/chung-chi-ssl-mien-phi-voi-lets-encrypt/</guid>
      <description>Hiện nay hầu hết các trang web đều đã hỗ trợ SSL (Secure Socket Layer). Nó mã hóa dữ liệu truyền đi giữa máy chủ web và trình duyệt và làm tăng tính bảo mật cho website. Ngoài ra, việc sử dụng SSL certificate (chứng chỉ SSL) là cần thiết bởi hiện tại Google đã ưu tiên xếp hạng website dựa theo giao thức https (HTTP + SSL), những website mà chỉ sử dụng giao thức http sẽ bị coi là &amp;ldquo;unsafe&amp;rdquo; (không an toàn).</description>
    </item>
    
    <item>
      <title>Cài đặt Gitlab bằng Docker</title>
      <link>https://huydq.dev/blog/cai-dat-gitlab-bang-docker/</link>
      <pubDate>Fri, 09 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/cai-dat-gitlab-bang-docker/</guid>
      <description>Ở bài trước mình có hướng dẫn cài đặt Gitlab trên Private Server, tuy nhiên cách cài này là cài trực tiếp lên server, có thể sẽ xung đột với các gói phần mềm có sẵn như: Redis, Nginx, &amp;hellip; Do đó bài này chúng ta sẽ thử cài Gitlab qua Docker - một công nghệ đang rất hot trong thời điểm hiện tại.
Việc đầu tiên chúng ta phải làm đó là cài đặt Docker, các bạn tham khảo tại đây, hướng dẫn này rất chi tiết rồi mình sẽ không nhắc lại nữa.</description>
    </item>
    
    <item>
      <title>Hướng dẫn cài đặt Gitlab trên Private Server</title>
      <link>https://huydq.dev/blog/huong-dan-cai-dat-gitlab-tren-private-server/</link>
      <pubDate>Tue, 18 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/huong-dan-cai-dat-gitlab-tren-private-server/</guid>
      <description>Gitlab là một công cụ để quản lý source code rất nổi tiếng hiện nay. Nó cho phép chúng ta tạo và quản lý các Git source repository tương tự nhu trên Github, tuy nhiên nó cho phép chúng ta tạo không giới hạn các private repository và nhiều chức năng thú vị khác như: code reviews, issue tracking, activity feeds, wikis, &amp;hellip;
Chúng ta có thể sử dụng gitlab bằng cách truy cập trang https://gitlab.</description>
    </item>
    
    <item>
      <title>Khoảng trắng bí ẩn bên dưới thẻ Img</title>
      <link>https://huydq.dev/blog/khoang-trang-bi-an-ben-duoi-the-img/</link>
      <pubDate>Sat, 10 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/khoang-trang-bi-an-ben-duoi-the-img/</guid>
      <description>Khi sử dụng thẻ img để chèn ảnh vào trang web, có 1 hiện tượng khá thú vị mà không phải ai cũng biết hoặc để ý đến. Đó là nếu bọc thẻ img bởi 1 thẻ div (hoặc bất kỳ 1 thẻ nào khác) thì sẽ xuất hiện 1 khoảng trắng nhỏ ở bên dưới ảnh.
Nếu chúng ta thiết lập padding cho thẻ div thì do khoảng trắng này mà khoảng cách phần bên dưới vẫn lớn hơn phần bên trên.</description>
    </item>
    
    <item>
      <title>29 câu lệnh Linux bạn nên biết - Phần 2</title>
      <link>https://huydq.dev/blog/29-cau-lenh-linux-ban-nen-biet-phan-2/</link>
      <pubDate>Sat, 15 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/29-cau-lenh-linux-ban-nen-biet-phan-2/</guid>
      <description>&amp;hellip; tiếp theo 29 câu lệnh Linux bạn nên biết phần 1
17. help &amp;ndash;help xem thông tin trợ giúp và các tùy chỉnh của câu lệnh.
Có thể viết tắt là -h
18. whatis – What is this command whatis hiển thị mô tả về câu lệnh.
19. man – Manual man ​ hiển thị trang hướng dẫn cho câu lệnh.
20. exit exit ​ thoát khỏi phiên làm việc.</description>
    </item>
    
    <item>
      <title>29 câu lệnh Linux bạn nên biết - Phần 1</title>
      <link>https://huydq.dev/blog/29-cau-lenh-linux-ban-nen-biet-phan-1/</link>
      <pubDate>Thu, 13 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/blog/29-cau-lenh-linux-ban-nen-biet-phan-1/</guid>
      <description>Các bản phân phối Linux đều có hỗ trợ giao diện người dùng để tương tác với máy tính. Tuy nhiên trong một số trường hợp sử dụng giao diện command line để điều khiển máy tính sẽ nhanh hơn và đơn giản hơn.
Trong giao diện command line, các câu lệnh (command) dùng để ra chỉ thị cho máy tính thực hiện một tác vụ nào đó. Bạn có thể sử dụng câu lệnh để tắt máy tính, xem danh sách các file trong thư mục, sao chép file, di chuyển và xóa file, &amp;hellip;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://huydq.dev/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/about/</guid>
      <description>Hi there 👋
Cảm ơn bạn đã ghé thăm blog của mình, một blog về công nghệ (chủ yếu là lập trình), nhưng cũng có thể có nhiều bài viết linh tinh nhảm nhí tùy hứng của tác giả.
Hy vọng các bài viết ở đây sẽ giúp phần nào cho công việc của các bạn (nếu bạn là lập trình viên), hoặc ít nhất nó cũng giúp bạn giải trí sau những giờ làm việc căng thẳng 😎.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://huydq.dev/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huydq.dev/projects/</guid>
      <description>Coming soon &amp;hellip; </description>
    </item>
    
    
  </channel>
</rss>
